[
{
  "model": "webapp.book",
  "pk": 1,
  "fields": {
    "name": "Bekbolot",
    "email": "beka@beka.com",
    "description": "В Django модель - это специальный класс, который представляет ваши данные. Модель не является непосредственно данными - это интерфейс доступа к данным. Обычно каждая модель соответствует одной сущности или таблице в базе данных. Каждый объект модели представляет одну запись (существующую или новую) в своей таблице.",
    "status": "active",
    "created_at": "2021-03-06T05:53:33.423Z",
    "updated_at": "2021-03-06T05:53:33.423Z"
  }
},
{
  "model": "webapp.book",
  "pk": 2,
  "fields": {
    "name": "admin",
    "email": "admin@admin.com",
    "description": "Миграции\r\nМодель не является таблицей в базе данных, а только определяет структуру, соответствующую возможной таблице. Чтобы создать таблицу на основе модели в Django нужно создать миграцию. Миграции описывают изменения в базе данных: создание и удаление таблиц, создание, изменение и удаление полей в них, создание и удаление связей между таблицами, изменение общей информации о моделях (метаданных) и т.д. Миграции обычно связаны с определёнными приложениями. Таким образом, каждое приложение может иметь независимую структуру таблиц в базе данных (и даже подключаться к разным базам) и свой набор миграций, что позволяет легко подключать и отключать приложения в проекте.",
    "status": "blocked",
    "created_at": "2021-03-06T05:55:33.111Z",
    "updated_at": "2021-03-06T05:55:33.111Z"
  }
},
{
  "model": "webapp.book",
  "pk": 3,
  "fields": {
    "name": "ivan",
    "email": "ivan@ivan.com",
    "description": "Django-консоль\r\nТеперь, когда у нас есть таблица в базе данных для модели Article мы можем попробовать добавить в неё какие-то данные или посмотреть, что в ней есть. Прежде, чем писать код на сайте, откройте django-консоль (django-shell) командой ./manage.py shell:",
    "status": "blocked",
    "created_at": "2021-03-06T05:56:28.923Z",
    "updated_at": "2021-03-06T05:56:35.529Z"
  }
},
{
  "model": "webapp.book",
  "pk": 4,
  "fields": {
    "name": "beka",
    "email": "beka@beka.com",
    "description": "Интерфейс администратора\r\nИтак, у нас есть модель и соответствующая ей таблица в базе данных. Давайте попробуем поработать с этой моделью из встроенного в Django интерфейса администратора - или \"админки\".",
    "status": "active",
    "created_at": "2021-03-06T05:57:17.356Z",
    "updated_at": "2021-03-06T05:57:17.356Z"
  }
},
{
  "model": "webapp.book",
  "pk": 5,
  "fields": {
    "name": "Oleg",
    "email": "oleg@oleg.com",
    "description": "Фикстуры\r\nФикстуры - это небольшие файлы в формате json или yaml, которые используются для хранения и перемещения данных из базы в сериализованном виде.\r\nФикстуры Django могут хранить только данные, и не описывают схему БД (таблицы и связи), в отличие от дампов SQL.\r\nФикстуры можно использовать, как резервные копии, из которых можно восстановить базу данных, или создать её копию.",
    "status": "active",
    "created_at": "2021-03-06T05:58:14.829Z",
    "updated_at": "2021-03-06T05:58:14.830Z"
  }
},
{
  "model": "auth.user",
  "pk": 1,
  "fields": {
    "password": "pbkdf2_sha256$216000$lTcqJ29cmC5D$wiUbQCCwGcfdlkbfd3M1GVYOh04/E0UXeTFQjg1RaQA=",
    "last_login": "2021-03-06T05:49:28.518Z",
    "is_superuser": true,
    "username": "admin",
    "first_name": "",
    "last_name": "",
    "email": "admin@gmail.com",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2021-03-06T05:49:03.657Z",
    "groups": [],
    "user_permissions": []
  }
}
]
